* df[['Total_Population']] is equivalent to df.iloc[:,[0]] 
	and selects the first columns of a dataframe that is titled 'Total Population'. SO if we want to go by index we will use the iloc 	otherwise if we know the name of the column we can use the first one.
* df.groupby('ColumnName').sum() 
	this one collapses multiple rows with the same value in 'ColumnName' and gets the sum
* df = df.assign(new_column = (df["a"] + df["b"]) ) 
	This one creates new columns based on the old column values
* scale data:
	from sklearn.preprocessing import StandardScaler
	scaler = StandardScaler()
	scaler.fit(features_np)
	scaled_data = scaler.transform(features_np)
* Kmeans clustering:
	from sklearn.cluster import KMeans
	kmeans = KMeans(n_clusters=3)
	kmeans.fit(scaled_data)
	predicted_results = kmeans.labels_
* PCA
	from sklean.decomposition import PCA
	pca = PCA(n_components=2)
	pca.fit(scaled_data)
	projected_axes = pca.transform(scaled_data)
*visualise all point against the first two principal components:
	plt.scatter(projected_axes[:,columnIDToVisX], projected_axes[:,columnIDToVisY], c = predicted_results, cmap = "plasma", alpha= 0.3)
* elbow method to decide on the number of correct clusters
	inertias = []
	for i in range(1, 30):
    	km = KMeans( n_clusters=i)
    	km.fit(X)
    	inertias.append(km.inertia_)

# plot
plt.plot(range(1, 30), inertias, marker='o')
plt.xlabel('Number of clusters')
plt.ylabel('Intertia')
plt.show()